from Part_2 import graph_module as gr


def main():
    print("Неориентированный граф:")
    test1 = gr.UndirectedGraph()
    test1.text_input('../test_data/test_graph.txt')
    print("Функция нахождения минимального пути:")
    print(test1.min_path('1', '2'))
    print("Вывод графа:")
    test1.print_graph()
    print("Проверка на связность:")
    print(test1.check_connectivity())
    print("Проверка на полноту:")
    print(test1.check_completeness())
    print("Проверка функции нахождения дополнения:")
    test_addition = test1.addition_graph()
    test_addition.print_graph()
    print("Проверка на двудольность:")
    print(test1.check_bipartite())
    print("Нахождение степени вершины:")
    print(test1.vertex_degree('0'))
    print("Нахождение количества компонент связности:")
    print(test1.get_comp_num())

    test2 = gr.DirectedGraph()
    test2.adj_list_input({'1': ['0'], '2': ['1'], '0': ['2'], '4': ['3'], '3': []})
    print("\nОриентированный граф:")
    print("Функция нахождения минимального пути:")
    print(test2.min_path('1', '2'))
    print("Вывод графа:")
    test2.print_graph()
    print("Проверка на слабую связность:")
    print(test2.check_weak_connection())
    print("Проверка на сильную связность:")
    print(test2.check_strong_connection())

    test3 = gr.WeightedGraph()
    test3.weighted_text_input('../test_data/test_graph_weighted.txt')
    print("\nВзвешенный граф:")
    print("Вывод графа:")
    test3.print_weighted_graph()
    print("Функция нахождения минимального пути:")
    print(test3.min_path('0', '3'))
    print("Функция нахождения минимального пути по весу:")
    print(*test3.min_path_weighted('0', '3'))
    print("Функция нахождения минимального остовного дерева:")
    test3.min_spanning_tree().print_weighted_graph()

    test4 = gr.WeightedGraph()
    test4.weighted_text_input('../test_data/test_graph_weighted_2.txt')
    print("\nВзвешенный граф 2:")
    print("Вывод графа:")
    test4.print_weighted_graph()
    print("Функция нахождения минимального пути:")
    print(test4.min_path('0', '6'))
    print("Функция нахождения минимального пути по весу:")
    print(*test4.min_path_weighted('0', '6'))
    print("Функция нахождения минимального остовного дерева:")
    test4.min_spanning_tree().print_weighted_graph()

    print("\nНеориентированный граф 2:")
    test1 = gr.UndirectedGraph(test4.adjacency_list)
    print("Функция нахождения минимального пути:")
    print(test1.min_path('1', '5'))
    print("Вывод графа:")
    test1.print_graph()
    print("Проверка на связность:")
    print(test1.check_connectivity())
    print("Проверка на полноту:")
    print(test1.check_completeness())
    print("Проверка функции нахождения дополнения:")
    test_addition = test1.addition_graph()
    test_addition.print_graph()
    print("Проверка на двудольность:")
    print(test1.check_bipartite())
    print("Нахождение степени вершины:")
    print(test1.vertex_degree('4'))
    print("Нахождение количества компонент связности:")
    print(test1.get_comp_num())


main()
